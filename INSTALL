Instructions for installing and running SARI locally on Windows, Linux or MacOS
-------------------------------------------------------------------------------

Note 1: These instructions describe the steps to install the R environment necessary to run SARI on your machine. There is always a risk that the environment you install will be different from the one I used to develop and test SARI. You can also run SARI on your machine with the expected environment using the SARI Docker image available at:
https://hub.docker.com/r/alvarosg/sari

Note 2: If you have the choice between a Windows and a Linux (including WSL) installation, it is recommended to install SARI on a Linux/WSL machine as SARI may run faster.

Note 3: If you want to run SARI from a WSL terminal, for instance by using the sari.sh script, you need to install R and all the package dependencies on WSL. The Windows installation is not necessary if you only want to run SARI from WSL.



1) Install R version 4.4.3 (Trophy Case) following the official R documentation here
https://cran.rstudio.com/bin/windows/base/

If you are installing a newer R version, please note that SARI has been tested on R version 4.4.3. It is recommended to install specific R release.



2) It is recommended to install RStudio if you plan to debug and/or contribute to the code development. It can also be used to run SARI, although this is not mandatory (see running options in point 6 below).
https://www.rstudio.com/products/rstudio/download/



3) With R (and RStudio) installed, some extras may be required before installing the SARI dependencies

3.1) If using Windows: install Rtools following these instructions  
https://cran.r-project.org/bin/windows/Rtools/rtools44/rtools.html

Once Rtools is installed, to use it, you must first install and load the devtools package.  
On the R/RStudio console type:

install.packages("devtools")
library(devtools)


3.2) If using MacOS: install Xcode and a GNU Fortran compiler (not fully tested, feedback is welcome) following:  
https://mac.r-project.org/tools/


3.3) If using Linux/WSL: install the following packages on your system (it may vary depending on the Linux distro, feedback is welcome):  

sudo apt-get install -y make zlib1g-dev libcurl4-openssl-dev libssl-dev libfontconfig1-dev libfreetype6-dev libfribidi-dev libharfbuzz-dev libjpeg-dev libpng-dev libtiff-dev pandoc libicu-dev libxml2-dev git libgit2-dev



4) Install all the R packages listed below and their dependencies from CRAN. 
The two methods indicated below will install the precompiled binaries for each package and their dependencies.

4.1) On Rstudio, go to Tools -> Install Packages  
Then copy & paste the following list of packages separated by commas:

data.table, devtools, dlm, fields, httr, import, lubridate, magrittr, markdown, matrixStats, numDeriv, pracma, psych, RColorBrewer, RCurl, XML, jsonlite, shinyBS, shinycssloaders, shinyjs, shinythemes, shiny, spectral, strucchange, tseries, foreach, mnormt, ragg

4.2) On the R/RStudio console, use the following command:
 
install.packages(c("data.table", "devtools", "dlm", "fields", "httr", "import", "lubridate", "magrittr", "markdown", "matrixStats", "numDeriv", "pracma", "psych", "RColorBrewer", "RCurl", "XML", "jsonlite", "shinyBS", "shinycssloaders", "shinyjs", "shinythemes", "shiny", "spectral", "strucchange", "tseries", "foreach", "mnormt", "ragg"))



5) In addition, the following packages are optional and allow for additional analysis, visualization features or faster functions:

5.1) The "mvcwt" package allows computing wavelet transforms. The source code of this package can be downloaded from here:  
https://cran.r-project.org/src/contrib/Archive/mvcwt/  

There are two ways to install this package:

5.1.1) In Rstudio, go to Tools -> Install Packages and select the downloaded mvcwt tar.gz file on your machine.

5.1.2) On the R/Rstudio console type:  

install.packages("/path/to/the/mvcwt/tar.gz/file")


5.2) The "leaflet" package allows you to add a map showing the station location and the nearby plate tectonic boundaries, if the station coordinates are known. This package can be installed like the others before, but it requires the GDAL library to be installed first, at least in order to compile the package on a Linux system. For Windows, this can be avoided by installing the package binary file.  

More information about the GDAL library here:  
https://gdal.org/download.html


5.3) The "geojsonio" package allows you to add the names of the tectonic plates on the location map. This package can be installed like the others before, but it requires the "sf" and "leaflet" packages to be installed first (see the previous section 5.2). It may be possible that the "sf" package needs to be installed from the file available at https://cran.rstudio.com/bin/windows/contrib/4.4/sf_1.0-20.zip (see the previous section 5.1.2).


5.4) If using a Windows machine, the "Rcpp", "RcppArmadillo" and "RcppEigen" packages allow you to compile ad hoc C++ functions defined in the 'functions.cpp' file, which would speed up the noise analysis on a Windows machine by about 4 times. These packages can be installed just like the others before. The ad hoc C++ functions themselves will be compiled each time the SARI app is run and this will take a few seconds.



6) Once all the packages are installed, there are three different ways to run SARI:

6.1) From the RStudio UI, clone or download the SARI repo, open the app.R script and do one of the following:

click on RunApp -> run external

or

go to Code -> Source

or

Ctrl + Shift + S


6.2) From the R/RStudio console, type one of these:

To run SARI without cloning the repo:  

library(shiny)    
runGitHub("sari", "alvarosantamariagomez", launch.browser=T)

or after cloning or downloading the SARI repo:  

runApp("/path/to/the/downloaded/SARI/app.R/file")


6.3) On a Unix-like terminal using the sari.sh shell script located in the scripts/ folder of the SARI repo.  
This shell script can also be used to start a local SARI session with Docker or a remote SARI session on Shinyapps.io without installing SARI.



For any comments or questions, please open a GitHub issue at  
https://github.com/alvarosantamariagomez/sari



Alvaro Santamaria  
alvaro.santamaria at get.omp.eu
